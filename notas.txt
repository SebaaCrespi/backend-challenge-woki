project-root/
│
├── src/
│   ├── application/
│   │   ├── events/
│   │   │   ├── UserRegisteredEvent.ts
│   │   │   ├── TaskCreatedEvent.ts
│   │   │   └── ProjectUpdatedEvent.ts
│   │   └── services/
│   │       ├── UserService.ts
│   │       ├── TaskService.ts
│   │       └── ProjectService.ts
│   │
│   ├── domain/
│   │   ├── events/
│   │   │   ├── UserDomainEvent.ts
│   │   │   ├── TaskDomainEvent.ts
│   │   │   └── ProjectDomainEvent.ts
│   │   ├── models/
│   │   │   ├── User.ts
│   │   │   ├── Task.ts
│   │   │   └── Project.ts
│   │   ├── repositories/
│   │   │   ├── UserRepository.ts
│   │   │   ├── TaskRepository.ts
│   │   │   └── ProjectRepository.ts
│   │   └── services/
│   │       ├── UserDomainService.ts
│   │       ├── TaskDomainService.ts
│   │       └── ProjectDomainService.ts
│   │
│   ├── infrastructure/
│   │   ├── events/
│   │   │   ├── EventBus.ts
│   │   │   ├── EventHandler.ts
│   │   │   └── EventListener.ts
│   │   ├── persistence/
│   │   │   ├── mongoose/
│   │   │   │   ├── schemas/
│   │   │   │   │   ├── UserSchema.ts
│   │   │   │   │   ├── TaskSchema.ts
│   │   │   │   │   └── ProjectSchema.ts
│   │   │   │   ├── UserModel.ts
│   │   │   │   ├── TaskModel.ts
│   │   │   │   └── ProjectModel.ts
│   │   │   ├── repositories/
│   │   │   │   ├── MongoUserRepository.ts
│   │   │   │   ├── MongoTaskRepository.ts
│   │   │   │   └── MongoProjectRepository.ts
│   │   └── mappers/
│   │       ├── UserMapper.ts
│   │       ├── TaskMapper.ts
│   │       └── ProjectMapper.ts
│   │
│   ├── interfaces/
│   │   ├── http/
│   │   │   ├── controllers/
│   │   │   │   ├── UserController.ts
│   │   │   │   ├── TaskController.ts
│   │   │   │   └── ProjectController.ts
│   │   │   ├── routes/
│   │   │   │   ├── userRoutes.ts
│   │   │   │   ├── taskRoutes.ts
│   │   │   │   └── projectRoutes.ts
│   │   │   └── middlewares/
│   │   │       └── authMiddleware.ts
│   │   └── cli/
│   │       └── cliCommands.ts
│   │
│   └── app.ts
│
├── package.json
├── tsconfig.json
├── .env
└── .gitignore




Create, read, update, and delete. The API should support the above operations using the appropriate HTTP methods (e.g. 	GET, POST, PUT, DELETE). Tasks should have a title, description, due date, and status (not started, in progress, completed)
Cambiar en los Repositories y mappers la lógica de las relaciones:
Un projecto no tiene relación directa con ninguna entidad

Una Task tiene relación con el projecto 1 a 1

Un usuario tiene una relación muchos a 1 con el proyecto 
(un usuario tiene un listado de proyectos)

trycatchs 
puts (project ya tiene)

TERMINAR UPDATE DE TASK
Validar con middleware campos al crear y actualizar entidades

Users should be able to retrieve a list of projects they are a part of, filtered by status


{  "_id": "667b63cd27f20f413985c190",
	"title": "CRUD operations for tasks",  
	"description": "Create, read, update, and delete. The API should support the above operations using the appropriate HTTP methods (e.g. 	GET, POST, PUT, DELETE). Tasks should have a title, description, due date, and status (not started, in progress, completed)",  
	"dueDate": "2024-06-26T00:00:00.000+00:00",  
	"status": "not started",  
	"project": "667a5788949fad80de52ed68",  
	"createdAt": "2024-06-25T06:28:46.096+00:00",  
	"updatedAt": "2024-06-25T06:28:46.096+00:00"  
}
Users should be able to retrieve a list of tasks they are assigned to, filtered by status
